@page "/hue"

@inject ISettingsService SettingsService
@inject AppState appState
@inject IModalService Modal
@inject ILogger<HueSetup> _logger;
@inject NavigationManager NavManager
<div class="container text-body" style="overflow:hidden">
    <div class="row">
        <div class="container-fluid">
            <div class="row-fluid">
                <div>
                    <h1>Configure Philips Hue</h1>
                    <br />
                    <br />
                    <div class="row">
                        <div class="col-4">
                            <input type="checkbox" @bind-value="@appState.Config.LightSettings.Hue.IsEnabled" checked="@appState.Config.LightSettings.Hue.IsEnabled" /> Connect to Philips Hue
                        </div>
                        @if (appState.Config.LightSettings.Hue.IsEnabled)
                        {
                            <div class="col-4">
                                <input type="checkbox" checked="@appState.Config.LightSettings.Hue.UseRemoteApi" @bind-value="@appState.Config.LightSettings.Hue.UseRemoteApi" /> Use Remote Api
                            </div>
                            <div class="col-4">
                                <button class="btn btn-primary" disabled="@(!appState.Config.LightSettings.Hue.UseRemoteApi)" @onclick="LoginRemoteApi">Login to Hue Cloud</button>
                            </div>
                        }
                    </div>
                    <br />
                    <br />
                    @if (appState.Config.LightSettings.Hue.IsEnabled)
                    {
                        <button class="btn btn-primary" @onclick="FindBridge">Find Bridge</button>
                        <br />
                        <br />
                        <EditForm Model="@appState.Config" OnValidSubmit="RegisterBridge">
                            <InputText id="name" @bind-Value="@appState.Config.LightSettings.Hue.HueIpAddress" />
                            <br />
                            <DataAnnotationsValidator />
                            <Microsoft.AspNetCore.Components.Forms.ValidationSummary />
                            <br />
                            <br />

                            <button class="btn btn-primary" type="submit">Register Bridge</button>
                        </EditForm>

                        <br />

                        @if (showHueMessage)
                        {
                            <span class="@hueMessageClass">@hueMessage</span>
                        }
                        <br />
                        <br />
                        <button @onclick="@((ev) => CheckHue("Lights"))" class="btn btn-primary" type="submit">Get Lights</button>
                        <span>&nbsp;&nbsp;</span>
                        <button @onclick="@((ev) => CheckHue("Groups"))" class="btn btn-primary" type="submit">Get Groups</button>
                        <br />
                        <br />
                        @if (appState.HueLights != null)
                        {
                            <span><strong>@lastType</strong></span>
                            <div class="form-group col-3  centering text-center">
                                <select class="form-control" @onchange="OnChange">
                                    <option disabled="disabled">Select</option>
                                    @foreach (var light in appState.HueLights)
                                    {
                                        if (light.GetType() == typeof(Q42.HueApi.Models.Groups.Group))
                                        {
                                            var obj = (Q42.HueApi.Models.Groups.Group)light;

                                            @if (appState.Config.LightSettings.Hue.SelectedItemId == $"group_id:{obj.Id}")
                                            {
                                                <option selected="selected" value=group_id:@obj.Id>@obj.Name</option>
                                            }
                                            else
                                            {
                                                <option value=group_id:@obj.Id>@obj.Name</option>
                                            }
                                        }
                                        else
                                        {
                                            var obj = (Q42.HueApi.Light)light;

                                            @if (appState.Config.LightSettings.Hue.SelectedItemId == $"id:{obj.Id}")
                                            {
                                                <option selected="selected" value=id:@obj.Id>@obj.Name</option>
                                            }
                                            else
                                            {
                                                <option value=id:@obj.Id>@obj.Name</option>
                                            }
                                        }
                                    }
                                </select>
                            </div>
                        }

                        <br />
                        <br />

                        <Statuses Light="@appState.Config.LightSettings.Hue"></Statuses>

                        <br />
                        <br />
                        @if (appState.Config.LightSettings.Hue.IsEnabled)
                        {
                            <button class="btn btn-primary" @onclick="Save">Save Hue Settings</button>
                        }
                        <br />
                        <br />
                        @if (settingsSaved)
                        {
                            <span class="text-success">@message</span>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    bool settingsSaved = false;
    string message;
    string hueMessageClass;

    bool showHueMessage = false;
    string hueMessage;

    string lastType = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!appState.SignedIn)
            {
                NavManager.NavigateTo("/");
            }
            if (!string.IsNullOrEmpty(appState.Config.LightSettings.Hue.HueApiKey))
            {
                if (appState.Config.LightSettings.Hue.SelectedItemId.Contains("group"))
                {
                    appState.SetHueLights(await _mediator.Send(new PresenceLight.Core.HueServices.GetGroupsCommand()));
                    lastType = "Groups";
                }
                else
                {
                    appState.SetHueLights(await _mediator.Send(new PresenceLight.Core.HueServices.GetLightsCommand()));
                    lastType = "Lights";
                }
            }

            appState.OnChange += RaiseStateHasChanged;
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Error Occured loading Hue Page");
            throw;
        }
    }


    private async Task Save()
    {
        try
        {
            await SettingsService.SaveSettings(appState.Config);

            _mediator.Send(new Core.HueServices.InitializeCommand() { AppState = appState }).Wait();

            message = "Settings Saved";
            settingsSaved = true;
            _logger.LogInformation("Settings Saved from Hue Page");
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Error Occured Saving Hue Settings");
            throw;
        }
    }

    private async Task LoginRemoteApi()
    {
        try
        {
            _logger.LogInformation("Cloud Hue Login Initialized");
            var (bridgeId, apiKey, bridgeIp) = await _mediator.Send(new PresenceLight.Core.RemoteHueServices.RegisterBridgeCommand());
            if (!string.IsNullOrEmpty(apiKey) && !string.IsNullOrEmpty(bridgeId) && !string.IsNullOrEmpty(bridgeIp))
            {
                appState.Config.LightSettings.Hue.HueApiKey = apiKey;
                appState.Config.LightSettings.Hue.RemoteBridgeId = bridgeId;
                appState.Config.LightSettings.Hue.HueIpAddress = bridgeIp;
                _logger.LogInformation("Cloud Hue Login Successful");
                await Save();
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error Occured Getting Cloud Hue Api Key");
        }
    }

    async Task FindBridge()
    {
        try
        {
            _logger.LogInformation("Hue Bridge Lookup Initialized");
            appState.Config.LightSettings.Hue.HueIpAddress = await _mediator.Send(new PresenceLight.Core.HueServices.FindBridgeCommand());
            _logger.LogInformation("Hue Bridge Lookup Successful");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error Occured Getting Finding Hue Bridge");
        }
    }


    async Task RegisterBridge()
    {
        _logger.LogInformation("Hue Bridge Registration Initialized");
        var formModal = Modal.Show<Confirm>("Please press the sync button on your Philips Hue Bridge");
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            _logger.LogInformation("Hue Bridge Registration Cancelled");
        }
        else
        {
            try
            {
                appState.Config.LightSettings.Hue.HueApiKey = await _mediator.Send(new Core.HueServices.RegisterBridgeCommand());
                _logger.LogInformation("Hue Bridge Registration Successful");
                await Save();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error Occured Registering Hue Bridge");
                hueMessage = "Error Occured registering bridge, please try again";
                showHueMessage = true;
                hueMessageClass = "text-danger";
            }

            if (!string.IsNullOrEmpty(appState.Config.LightSettings.Hue.HueApiKey))
            {
                try
                {
                    showHueMessage = true;
                    hueMessage = "App Registered with Bridge";
                    hueMessageClass = "text-success";


                    appState.SetHueLights(await _mediator.Send(new PresenceLight.Core.HueServices.GetLightsCommand()));

                    if (string.IsNullOrEmpty(appState.Config.LightSettings.Hue.SelectedItemId) && appState.HueLights.Count() > 0)
                    {
                        appState.Config.LightSettings.Hue.SelectedItemId = ((Q42.HueApi.Light)appState.HueLights.FirstOrDefault()).Id;
                    }
                }
                catch (Exception e)
                {
                    _logger.LogError(e, "Error Occured Getting Hue Lights");
                    throw;
                }

                await Save();
            }

            else
            {
                _logger.LogError("Hue Api Key not configured");
                hueMessage = "Api Key Not Created, please try again and ensure you press the sync button on your bridge";
                showHueMessage = true;
                hueMessageClass = "text-danger";
            }
        }
    }

    async Task CheckHue(string type)
    {
        if (string.IsNullOrEmpty(lastType) || type != lastType)
        {
            appState.Config.LightSettings.Hue.SelectedItemId = string.Empty;
            lastType = type;
        }

        _logger.LogInformation($"Get Hue {type} Initialized");

        if (!string.IsNullOrEmpty(appState.Config.LightSettings.Hue.HueApiKey))
        {
            try
            {
                if (type == "Groups")
                {

                    appState.SetHueLights(await _mediator.Send(new Core.HueServices.GetGroupsCommand()));

                    if (string.IsNullOrEmpty(appState.Config.LightSettings.Hue.SelectedItemId) && appState.HueLights.Count() > 0)
                    {
                        var obj = (Q42.HueApi.Models.Groups.Group)appState.HueLights.FirstOrDefault();
                        appState.Config.LightSettings.Hue.SelectedItemId = $"group_id:{obj.Id}";
                    }
                }
                else
                {
                    appState.SetHueLights(await _mediator.Send(new Core.HueServices.GetLightsCommand()));

                    if (string.IsNullOrEmpty(appState.Config.LightSettings.Hue.SelectedItemId) && appState.HueLights.Count() > 0)
                    {
                        var obj = (Q42.HueApi.Light)appState.HueLights.FirstOrDefault();
                        appState.Config.LightSettings.Hue.SelectedItemId = $"id:{obj.Id}";
                    }
                }

                await Save();

                showHueMessage = true;
                hueMessage = "Connected to Hue";
                hueMessageClass = "text-success";

                _logger.LogInformation($"Get Hue {type} Successful");
            }
            catch (Exception e)
            {
                _logger.LogError(e, "Error Occured Getting Hue Lights");
                showHueMessage = true;
                hueMessage = "Error Occured Connecting to Hue, please try again";
                hueMessageClass = "text-danger";
                this.StateHasChanged();
                appState.SetHueLights(new List<Q42.HueApi.Light>());
            }

        }
    }

    private void OnChange(ChangeEventArgs e)
    {
        var light = e.Value.ToString();
        appState.Config.LightSettings.Hue.SelectedItemId = light;
        appState.SetHueLight(light);
        _logger.LogInformation($"Selected Hue Light Set: {light}");
    }

    public void Dispose()
    {
        appState.OnChange -= RaiseStateHasChanged;
    }

    private void RaiseStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }
}
